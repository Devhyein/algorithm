완전 탐색을 이용한 문제

```java
package swea;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Solution_3378_스타일리쉬들여쓰기_교수님 {
	
	static int p,q;
	static char[][] prr; // 마스터 코드 
	static char[][] qrr; // 사용자 코드
	static int[] res;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st = null;
		
		for(int t=1; t<=T; t++) {
			st = new StringTokenizer(br.readLine(), " ");
			p = Integer.parseInt(st.nextToken());
			q = Integer.parseInt(st.nextToken());
			prr = new char[p][];
			qrr = new char[q][];
			res = new int[q];
			
			// res배열 초기화
			for(int i=0; i<q; i++) {
				res[i] = -2; // 사용 되지 않는 임의의 값 넣어줌
			}
			
			for(int i=0; i<p; i++) {
				prr[i] = br.readLine().toCharArray();
			}
			for(int i=0; i<q; i++) {
				qrr[i] = br.readLine().toCharArray();
			}
			
			// 솔루션 구현
			for(int r=1; r<=20; r++) {
				for(int c=1; c<=20; c++) {
					for(int s=1; s<=20; s++) {
						// r,c,s의 모든 값들을 다 돌려서 가능성 있는지
						if(isFind(r,c,s)) {
							solve(r,c,s);
						}
					}
				}
			}
			
			// 출력
			System.out.print("#" + t + " "); //뒤에 부분에 배열 추가 출력
			for(int i=0; i<q; i++) {
				System.out.print(res[i]+" ");
			}
			System.out.println();
		}
	}

	private static boolean isFind(int r, int c, int s) {
		int rCnt = 0, cCnt = 0, sCnt = 0;
		boolean flag = true;
		int cnt = 0;
		int intent = 0; //들여쓰기 개수 (점의 개수)
		
		// 마스터의 코드를 보고  r,c,s가 맞는지 판단.
		for(int i=0; i<p; i++) {
			cnt = 0;
			for(char ch : prr[i]) {
				if(ch == '.' ) {
					cnt++;
				} else {
					break; // 요거 안해주면 문장 안에 있는 .의 개수도 세줌.
				}
			}
			// 공백 판단 R(a-b) + C(c-d) + S(e-f)
			intent = rCnt * r + cCnt * c + sCnt * s;
			// intent와 실제 라인에 있는 .의 개수가 같아야 함
			if(intent != cnt) {
				flag = false;
				break;
			}
			for(char ch:prr[i]) {
				switch(ch) {
				case '(':
					rCnt++;
					break;
				case ')':
					rCnt--;
					break;
				case '{':
					cCnt++;
					break;
				case '}':
					cCnt--;
					break;
				case '[':
					sCnt++;
					break;
				case ']':
					sCnt--;
					break;
				}
			}
		}
		
		return flag;
	}

	private static void solve(int r, int c, int s) {
		int rCnt = 0, cCnt = 0, sCnt = 0;
		int intent;
		
		for(int i=0; i<q; i++) {
			intent = rCnt * r + cCnt * c + sCnt * s;
			
			// 이 배열에 처음 들어가는 값인지 판단
			if(res[i] == -2) {
				res[i] = intent;
			} else {
//				res[i] = -1; 이렇게 하면 안됨. 만약 원래 값이 5였는데 다른 값이 있나 찾다가 다시 5라는 값이 구해진 경우가 생길 수 있음. 그러면 원래는 5가 답인데 이렇게 코딩해버리면 -1이 답으로 들어가버림.
				// 이미 값이 들어가있고, 그 값이 현재 들어오려는 intent와 다른 경우만 -1 넣어줌
				if(res[i] != intent) {
					res[i] = -1;
				}
			}
			
			for(char ch : qrr[i]) {
				switch(ch) {
				case '(':
					rCnt++;
					break;
				case ')':
					rCnt--;
					break;
				case '{':
					cCnt++;
					break;
				case '}':
					cCnt--;
					break;
				case '[':
					sCnt++;
					break;
				case ']':
					sCnt--;
					break;
				}
			}
		}
	}

}

```

- 내가 틀렸던 부분
```java
			if(res[i] == -2) {
				res[i] = intent;
			} else {
//				res[i] = -1; 이렇게 하면 안됨. 만약 원래 값이 5였는데 다른 값이 있나 찾다가 다시 5라는 값이 구해진 경우가 생길 수 있음. 그러면 원래는 5가 답인데 이렇게 코딩해버리면 -1이 답으로 들어가버림.
				// 이미 값이 들어가있고, 그 값이 현재 들어오려는 intent와 다른 경우만 -1 넣어줌
				if(res[i] != intent) {
					res[i] = -1;
				}
			}
```
  여기서 예외처리를 덜해줌
